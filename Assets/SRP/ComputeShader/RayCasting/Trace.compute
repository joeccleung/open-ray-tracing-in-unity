#ifndef TRACE_COMPUTE
#define TRACE_COMPUTE

#include "../Ray.compute"
#include "../RayHit.compute"
#include "../BVH/RayBoxIntersect.compute"
#include "../Shading/CustomShaderCollection.compute"

// BVH
StructuredBuffer<int> _TopLevelAccelerationGeometryMapping;
// -
// -
RayHit Trace(Ray ray)
{
    int NO_CHILD = -1;

    RayHit bestHit = CreateRayHit();

    // Sometimes, not all sibling secondary rays are initialized. Their ray.tmin will be smaller than 0.
    if (ray.tmin < 0) 
    {
        return bestHit;
    }

    int bvhStack[32];
    bvhStack[0] = 0;
    int bvhHead = 0;

    [fastopt] while (true)
    {
        if (bvhHead <= -1) 
        {
            // No more node to traverse
            break;
        }

        int nodeIdx = bvhStack[bvhHead];
        bvhHead--;

        if (RayBoxIntersection(ray, _BVHTree[nodeIdx].min, _BVHTree[nodeIdx].max))
        {
            if (_BVHTree[nodeIdx].leftIdx == NO_CHILD) 
            {
                // Leaf node

                // Check the mapping
                int mapCursor = _BVHTree[nodeIdx].rightIdx;
                int numberOfPrimitiveInThisBox = _TopLevelAccelerationGeometryMapping[mapCursor];

                [fastopt] for(int p = 1; p <= numberOfPrimitiveInThisBox; p++) // Shift 1 due to [0] holds the number of indices in this box
                {
                    IntersectByGeometry(ray, bestHit, _TopLevelAccelerationGeometryMapping[mapCursor + p]);
                }
            }
            else
            {
                bvhHead++;
                bvhStack[bvhHead] = _BVHTree[nodeIdx].rightIdx;
                bvhHead++;
                bvhStack[bvhHead] = _BVHTree[nodeIdx].leftIdx;
            }
        }
    }
    
    return bestHit;
}

float3 ShadowTrace(Ray ray, int originPrimitiveId)
{
    int NO_CHILD = -1;
    
    RayHit bestHit = CreateRayHit();
        
    int bvhStack[32];
    bvhStack[0] = 0;
    int bvhHead = 0;
    [fastopt] while (true)
    {
        if (bvhHead <= -1) {
            // No more node to traverse
            return ray.color;   // Use the ray color
        }

        int nodeIdx = bvhStack[bvhHead];
        bvhHead--;

        if (RayBoxIntersection(ray, _BVHTree[nodeIdx].min, _BVHTree[nodeIdx].max)) {
            if (_BVHTree[nodeIdx].leftIdx == NO_CHILD) {
                // Leaf node

                // Check the mapping
                int mapCursor = _BVHTree[nodeIdx].rightIdx;
                int numberOfPrimitiveInThisBox = _TopLevelAccelerationGeometryMapping[mapCursor];

                [fastopt] for(int p = 1; p <= numberOfPrimitiveInThisBox; p++) // Shift 1 due to [0] holds the number of indices in this box
                {
                    IntersectByGeometry(ray, bestHit, _TopLevelAccelerationGeometryMapping[mapCursor + p]);
                    // It hit something and it is not the origin primitive, the light is blocked
                    if (bestHit.primitiveId != -1 && bestHit.primitiveId != originPrimitiveId) {
                        ray.color = ray.color * OnShadowRayHit(ray, bestHit);
                    }
                }
            }
            else
            {
                bvhHead++;
                bvhStack[bvhHead] = _BVHTree[nodeIdx].rightIdx;
                bvhHead++;
                bvhStack[bvhHead] = _BVHTree[nodeIdx].leftIdx;
            }
        }
    }

    return ray.color;   // Not hitting anything, use ray color
} 

#endif //TRACE_COMPUTE