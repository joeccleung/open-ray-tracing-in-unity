#ifndef RTTriangle_Intersect_COMPUTE
#define RTTriangle_Intersect_COMPUTE


static const float EPSILON = 1.19e-07f;

struct RTTriangle
{
    // int id;
    float3 vertices[3];
    float3 normal[3];
    float planeD;
    float area;
    // int isDoubleSide;
    // int matIndex;
};

StructuredBuffer<RTTriangle> _RTTriangle;

// [intersect(RTTriangle)]
void RTTriangleIntersect(Ray ray, inout RayHit bestHit, Primitive primitive, int primitiveId)
{
    [fastopt] for(int s = 0; s < primitive.geometryInstanceCount; s++)
    {
        RTTriangle tri = _RTTriangle[primitive.geometryInstanceBegin + s];

        float4 result = TriangleIntersectUtils(ray, bestHit.distance, tri.vertices);

        if (result.x != -1) // Has intersect?
        {
            //TODO: Optimization. Calculate best hit after the for loop
            bestHit.barycentric = float3(result.z, result.w, 1-result.z-result.w);
            bestHit.distance = result.x;
            bestHit.position = ray.origin + result.x * ray.direction;
            bestHit.normal = bestHit.barycentric.x * result.y * tri.normal[0] + bestHit.barycentric.y * result.y * tri.normal[1] + bestHit.barycentric.z * result.y * tri.normal[2];
            bestHit.primitiveId = primitiveId;

            if (result.y == 1)  // Ray is outside?
            {
                bestHit.mediumToEnter = 0;  // Ray is outside
            }
            else
            {
                bestHit.mediumToEnter = primitiveId;  // Ray is inside
            }
        }
    }
}

#endif